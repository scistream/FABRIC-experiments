// sockmap_user.c
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/select.h>
#include <unistd.h>
#include <netdb.h>
#include <signal.h>
#include <arpa/inet.h>
//#include <netinet/in.h>
#include "bpf_load.h"
#include "bpf_util.h"

#define MAXSIZE 1024
char buf[MAXSIZE];
static int proxysd1, proxysd2, proxysd1_client;

static int sockmap_fd, proxymap_fd, bpf_prog_fd;
static int progs_fd[2];
static int key, val;
static unsigned short key16;
static int ctrl = 0;

static void int_handler(int a)
{
        close(proxysd1);
        close(proxysd1_client);
        close(proxysd2);
        exit(0);
}

// can use sending the HUP signal to open/close the sockmap code.
static void hup_handler(int a)
{
        if (ctrl == 1) {
                key = 0;
                bpf_map_update_elem(sockmap_fd, &key, &proxysd1_client, BPF_ANY);
                key = 1;
                bpf_map_update_elem(sockmap_fd, &key, &proxysd2, BPF_ANY);
                ctrl = 0;
        } else if (ctrl == 0){
                key = 0;
                bpf_map_delete_elem(sockmap_fd, &key);
                key = 1;
                bpf_map_delete_elem(sockmap_fd, &key);
                ctrl = 1;
        }
}

int main(int argc, char **argv)
{
        char filename[256];
        snprintf(filename, sizeof(filename), "%s_kern.o", argv[0]);
        struct bpf_object *obj;
        struct bpf_program *prog;
        struct bpf_prog_load_attr prog_load_attr = {
                .prog_type      = BPF_PROG_TYPE_SK_SKB,
        };

        int ret;
        struct sockaddr_in proxyaddr1, proxyaddr2;
        struct hostent *proxy1, *proxy2;
        unsigned short port1, port2;
        fd_set rset;
        int maxfd = 10;

        if (argc != 5) {
        printf("Usage: sockmap ip1 port1 ip2 port2!\n");
        exit(1);
    }

        prog_load_attr.file = filename;

        signal(SIGINT, int_handler);
        signal(SIGHUP, hup_handler);

        //* This block of code create the ebpf/sockmap logic, finished the bpf loading and attach
        bpf_prog_load_xattr(&prog_load_attr, &obj, &bpf_prog_fd);

        sockmap_fd = bpf_object__find_map_fd_by_name(obj, "sock_map");
        proxymap_fd = bpf_object__find_map_fd_by_name(obj, "proxy_map");

        prog = bpf_object__find_program_by_title(obj, "prog_parser");
        progs_fd[0] = bpf_program__fd(prog);
        bpf_prog_attach(progs_fd[0], sockmap_fd, BPF_SK_SKB_STREAM_PARSER, 0);

        prog = bpf_object__find_program_by_title(obj, "prog_verdict");
        progs_fd[1] = bpf_program__fd(prog);
        bpf_prog_attach(progs_fd[1], sockmap_fd, BPF_SK_SKB_STREAM_VERDICT, 0);
        ////***

        proxy1 = gethostbyname(argv[1]);
        port1 = atoi(argv[2]);

        proxy2 = gethostbyname(argv[3]);
        port2 = atoi(argv[4]);

        //deal with server

        proxysd1 = socket(AF_INET, SOCK_STREAM, 0);
        if (proxysd1 < 0){
                        perror("build_server: socket()");
                        return 1;
        }
        int optval = 1;
        if (setsockopt(proxysd1, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)) < 0){
                        perror("build_server: setsockopt(SO_REUSEADDR)");
                        return 1;
        }


        //bzero(&proxyaddr1, sizeof(struct sockaddr_in));
        proxyaddr1.sin_family = AF_INET;
        proxyaddr1.sin_port = htons(0);
        //proxyaddr1.sin_addr = *((struct in_addr *)proxy1->h_addr);
        proxyaddr1.sin_addr.s_addr = INADDR_ANY;

        if (bind(proxysd1, (struct sockaddr *) &proxyaddr1, sizeof(proxyaddr1)) < 0){
                        perror("build_server: bind()");
                        return 1;
        }

        if (listen(proxysd1, 1) < 0) {
                        perror("build_server: listen()");
                        return 1;
        }

        struct sockaddr_in sin;
        socklen_t slen = sizeof(sin);
        if (getsockname(proxysd1, (struct sockaddr *) &sin, &slen) == -1) {
                        perror("getsockname");
        } else {
                        printf("> waiting for connection on port %d\n",  ntohs(sin.sin_port));

                        // if (!settings.local_port) {
                        //      // Used by s2cs.py to get OS-allocated port
                        //      // TODO: If need to print out server IP, need to wait for connection if no bind_address
                        //      printf("%d\n", ntohs(sin.sin_port));
                        //      fflush(stdout);
                        // }
        }

        /* Handle incoming client connections to the server*/
        unsigned int client_addr_size;
        client_addr_size = sizeof(struct sockaddr_in);
        //check successful here
        struct sockaddr_in client;
        proxysd1_client = accept(proxysd1,(struct sockaddr *)&client , &client_addr_size);
        if (proxysd1_client < 0){
                        if (errno != EINTR){
                                        perror("wait_for_clients: accept()");
                        }
                        //return 1;
        } else{
                        printf("Client connected.\n");
        }
        char client_ip;
        client_ip = inet_ntoa(client.sin_addr);
        int client_port;
        client_port = ntohs(client.sin_port);

        printf("> client actually port on %d\n", client_port );

				/* There is a bug in sockmap which prevents it from
				 * working right when snd buffer is full. Set it to
				 * gigantic value. */
				int value = 32 * 1024 * 1024;
				setsockopt(proxysd1_client, SOL_SOCKET, SO_SNDBUF, &value, sizeof(value));


        //set remote address
        proxysd2 = socket(AF_INET, SOCK_STREAM, 0);

        bzero(&proxyaddr2, sizeof(struct sockaddr_in));
        proxyaddr2.sin_family = AF_INET;
        proxyaddr2.sin_port = htons(port2);
        proxyaddr2.sin_addr = *((struct in_addr *)proxy2->h_addr);

        //do we really need this line?
//      if (connect(proxysd1_client, (struct sockaddr *)&proxyaddr1, sizeof(struct sockaddr)) < 0){
//                      perror("build_tunnel: connect proxysd1_client()");
//                      return 1;
//      }else{
//                      printf("successfully connected to client\n");
//      }

				int value2 = 32 * 1024 * 1024;
				setsockopt(proxysd2, SOL_SOCKET, SO_SNDBUF, &value2, sizeof(value2));

        if (connect(proxysd2, (struct sockaddr *) &proxyaddr2, sizeof(struct sockaddr)) < 0){
                        perror("build_tunnel: connect()");
                        return 1;
        }else{
                        printf("successfully connected to remote\n");
        }

        //bpf_map_update_elem: Add or update the value of the entry associated to key in map with value.
        key = 0;
        if (bpf_map_update_elem(sockmap_fd, &key, &proxysd1_client, BPF_ANY) < 0){
                        perror("assign client to ebpf error");
                        return 1;
        }else{
                        printf("successfully assign ebpf on client socket\n");
        }

        key = 1;
        if (bpf_map_update_elem(sockmap_fd, &key, &proxysd2, BPF_ANY) < 0){
                        perror("assign remote to ebpf error");
                        return 1;
        }else{
                        printf("successfully assign ebpf on remote socket\n");
        }

        key16 = port2;
        val = 0;
        if (bpf_map_update_elem(proxymap_fd, &key16, &val, BPF_ANY) < 0){
                        perror("proxy forward error remote to client");
                        return 1;
        }
				else{
                        printf("successfully forward: remote to client\n");
        }


        key16 = client_port;
        val = 1;
        if (bpf_map_update_elem(proxymap_fd, &key16, &val, BPF_ANY) < 0){
                        perror("proxy forward error client to remote");
                        return 1;
        }
				else{
                        printf("successfully forward: client to remote\n");
        }



        // original proxy code
        while (1) {
                FD_SET(proxysd1, &rset);
                FD_SET(proxysd2, &rset);
                select(maxfd, &rset, NULL, NULL, NULL);
                memset(buf, 0, MAXSIZE);
                if (FD_ISSET(proxysd1, &rset)) {
                        ret = recv(proxysd1, buf, MAXSIZE, 0);
                        printf("%d --> %d proxy string:%s\n", proxysd1, proxysd2, buf);
                        send(proxysd2, buf, ret, 0);
                }
                if (FD_ISSET(proxysd2, &rset)) {
                        ret = recv(proxysd2, buf, MAXSIZE, 0);
                        printf("%d --> %d proxy string:%s\n", proxysd2, proxysd1, buf);
                        send(proxysd1, buf, ret, 0);
                }
        }

        return 0;
}
